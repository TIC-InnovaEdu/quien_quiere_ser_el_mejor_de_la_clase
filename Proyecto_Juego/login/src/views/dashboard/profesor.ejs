<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Profesor</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        @keyframes float {
            0%, 100% { transform: translateY(0) rotate(0); }
            50% { transform: translateY(-10px) rotate(5deg); }
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); opacity: 0.8; }
            50% { transform: scale(1.1); opacity: 1; }
        }

        .float-icon {
            animation: float 3s ease-in-out infinite;
        }

        .pulse-icon {
            animation: pulse 2s ease-in-out infinite;
        }

        .card-hover {
            transition: all 0.3s ease;
        }

        .card-hover:hover {
            transform: translateY(-5px);
            box-shadow: 0 25px 50px -12px rgba(37, 99, 235, 0.25);
        }
    </style>
</head>
<body class="bg-gradient-to-br from-gray-50 via-blue-50 to-gray-100 min-h-screen relative overflow-hidden">
    <!-- Iconos flotantes -->
    <div class="absolute left-10 top-20 text-blue-500 opacity-20 float-icon">
        <i class="fas fa-graduation-cap text-7xl"></i>
    </div>
    <div class="absolute right-20 top-40 text-blue-500 opacity-20 float-icon" style="animation-delay: -1.5s;">
        <i class="fas fa-book text-6xl"></i>
    </div>
    <div class="absolute left-20 bottom-20 text-blue-500 opacity-20 float-icon" style="animation-delay: -1s;">
        <i class="fas fa-pencil-alt text-6xl"></i>
    </div>
    <div class="absolute right-10 bottom-40 text-blue-500 opacity-20 float-icon" style="animation-delay: -2s;">
        <i class="fas fa-award text-7xl"></i>
    </div>

    <div class="container mx-auto px-4 py-8 relative z-10">
        <!-- Card Principal -->
        <div class="max-w-2xl mx-auto bg-white rounded-lg shadow-lg p-8 card-hover">
            <div class="text-center mb-8">
                <i class="fas fa-chalkboard-teacher text-4xl text-blue-600 mb-4 pulse-icon"></i>
                <h1 class="text-3xl font-bold text-gray-800">
                    Bienvenido Profesor <%= user.local.username %>
                </h1>
            </div>

            <!-- Estado del Juego -->
            <div class="mb-8 p-4 bg-gray-50 rounded-lg border border-gray-200">
                <div class="flex items-center justify-between">
                    <p id="gameStatus" class="text-lg flex items-center">
                        <i class="fas fa-circle text-sm mr-2"></i>
                        Estado: <span class="font-semibold">Desactivado</span>
                    </p>
                    <button id="toggleGameBtn"
                            class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition duration-200 flex items-center gap-2">
                        <i class="fas fa-power-off"></i>
                        Activar Juego
                    </button>
                </div>
            </div>

            <!-- Men√∫ de Navegaci√≥n -->
            <nav class="grid gap-4">
                <a href="/profesor/preguntas"
                   class="flex items-center justify-between bg-white border border-gray-200 hover:border-blue-500 p-4 rounded-lg group transition duration-200">
                    <span class="text-lg text-gray-700 group-hover:text-blue-600 flex items-center">
                        <i class="fas fa-question-circle mr-2"></i>
                        Gestionar Preguntas
                    </span>
                    <i class="fas fa-chevron-right text-gray-400 group-hover:text-blue-500 transition-transform group-hover:translate-x-1"></i>
                </a>

                <a href="/profesor/puntajes"
                   class="flex items-center justify-between bg-white border border-gray-200 hover:border-blue-500 p-4 rounded-lg group transition duration-200">
                    <span class="text-lg text-gray-700 group-hover:text-blue-600 flex items-center">
                        <i class="fas fa-trophy mr-2"></i>
                        Ver Puntajes
                    </span>
                    <i class="fas fa-chevron-right text-gray-400 group-hover:text-blue-500 transition-transform group-hover:translate-x-1"></i>
                </a>

                <a href="/logout"
                   class="flex items-center justify-between bg-white border border-gray-200 hover:border-red-500 p-4 rounded-lg group transition duration-200">
                    <span class="text-lg text-gray-700 group-hover:text-red-600 flex items-center">
                        <i class="fas fa-sign-out-alt mr-2"></i>
                        Cerrar sesi√≥n
                    </span>
                    <i class="fas fa-chevron-right text-gray-400 group-hover:text-red-500 transition-transform group-hover:translate-x-1"></i>
                </a>
            </nav>
        </div>
    </div>

    <!-- Modal de Advertencia -->
    <div id="popupContainer" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 max-w-sm mx-4 animate-bounce-in">
            <div class="flex items-center mb-4">
                <i class="fas fa-exclamation-triangle text-2xl text-red-600 mr-3"></i>
                <h2 class="text-xl font-bold text-gray-800">¬°Atenci√≥n!</h2>
            </div>
            <p id="popupMessage" class="text-red-600 mb-6"></p>
            <button onclick="cerrarPopup()"
                    class="w-full bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg transition duration-200 flex items-center justify-center">
                <i class="fas fa-times mr-2"></i>
                Cerrar
            </button>
        </div>
    </div>

    <script>
        async function obtenerEstadoJuego() {
            try {
                const response = await fetch("/api/estado-juego");
                const data = await response.json();
                actualizarInterfazJuego(data.isActive);
            } catch (error) {
                console.error("‚ùå Error obteniendo el estado del juego:", error);
            }
        }

        function actualizarInterfazJuego(isActive) {
            const gameStatus = document.getElementById("gameStatus");
            const toggleGameBtn = document.getElementById("toggleGameBtn");

            if (isActive) {
                gameStatus.innerHTML = `
                    <i class="fas fa-circle text-sm mr-2 text-green-500"></i>
                    Estado: <span class="font-semibold text-green-600">Activado</span>
                `;
                toggleGameBtn.innerHTML = `
                    <i class="fas fa-power-off"></i>
                    Desactivar Juego
                `;
                toggleGameBtn.classList.remove('bg-blue-600', 'hover:bg-blue-700');
                toggleGameBtn.classList.add('bg-red-600', 'hover:bg-red-700');
            } else {
                gameStatus.innerHTML = `
                    <i class="fas fa-circle text-sm mr-2 text-red-500"></i>
                    Estado: <span class="font-semibold text-red-600">Desactivado</span>
                `;
                toggleGameBtn.innerHTML = `
                    <i class="fas fa-power-off"></i>
                    Activar Juego
                `;
                toggleGameBtn.classList.remove('bg-red-600', 'hover:bg-red-700');
                toggleGameBtn.classList.add('bg-blue-600', 'hover:bg-blue-700');
            }
        }

        async function cambiarEstadoJuego() {
            const toggleGameBtn = document.getElementById("toggleGameBtn");
            const nuevoEstado = toggleGameBtn.textContent.trim().includes("Activar");

            console.log("üìå Enviando nuevo estado:", nuevoEstado);

            try {
                const response = await fetch("/profesor/estado-juego", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ isActive: nuevoEstado })
                });

                const data = await response.json();

                if (!response.ok) {
                    if (data.preguntasFaltantes !== undefined) {
                        mostrarPopup(`No puedes activar el juego. Faltan ${data.preguntasFaltantes} preguntas.`);
                    } else {
                        mostrarPopup("Error: " + data.message);
                    }
                    return;
                }

                actualizarInterfazJuego(data.isActive);
            } catch (error) {
                console.error("‚ùå Error actualizando el estado del juego:", error);
                mostrarPopup("Error al actualizar el estado del juego");
            }
        }

        function mostrarPopup(mensaje) {
            document.getElementById("popupMessage").innerText = mensaje;
            document.getElementById("popupContainer").classList.remove("hidden");
            document.getElementById("popupContainer").classList.add("flex");
        }

        function cerrarPopup() {
            document.getElementById("popupContainer").classList.remove("flex");
            document.getElementById("popupContainer").classList.add("hidden");
        }

        // Asegurarse de que los event listeners se agreguen cuando el DOM est√© cargado
        document.addEventListener('DOMContentLoaded', function() {
            const toggleGameBtn = document.getElementById("toggleGameBtn");
            if (toggleGameBtn) {
                toggleGameBtn.addEventListener("click", cambiarEstadoJuego);
            }
            obtenerEstadoJuego(); // Cargar estado inicial
        });
    </script>
</body>
</html>
